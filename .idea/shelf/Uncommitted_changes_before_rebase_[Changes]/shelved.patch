Index: src/main/java/ua/goit/service/CompanyService.java
===================================================================
diff --git a/src/main/java/ua/goit/service/CompanyService.java b/src/main/java/ua/goit/service/CompanyService.java
deleted file mode 100644
--- a/src/main/java/ua/goit/service/CompanyService.java	(revision 1a6b14e698b535404112631ff0ae7edd163ae2b0)
+++ /dev/null	(revision 1a6b14e698b535404112631ff0ae7edd163ae2b0)
@@ -1,108 +0,0 @@
-package ua.goit.service;
-
-import ua.goit.config.HibernateDatabaseConnector;
-import ua.goit.dao.CompanyDAO;
-import ua.goit.dao.HibernateCompanyDAO;
-import ua.goit.dao.model.Company;
-import ua.goit.dto.CompanyDTO;
-import ua.goit.view.Util;
-
-import java.sql.SQLException;
-import java.util.ArrayList;
-import java.util.List;
-
-import static ua.goit.service.Converter.fromCompany;
-import static ua.goit.service.Converter.toCompany;
-
-public class CompanyService implements Service<CompanyDTO> {
-    private final Util util = new Util();
-    CompanyDAO companyDAO = new CompanyDAO();
-    HibernateCompanyDAO dao = new HibernateCompanyDAO(HibernateDatabaseConnector.getSessionFactory());
-
-    @Override
-    public CompanyDTO create(CompanyDTO companyDTO){
-        Company company = toCompany(companyDTO);
-        try {
-            return fromCompany(companyDAO.create(company));
-        } catch (SQLException e) {
-            return null;
-        }
-    }
-
-    @Override
-    public String delete(CompanyDTO companyDTO) {
-        Company company = toCompany(companyDTO);
-        try {
-            companyDAO.delete(company.getCompany_id());
-            return "Your request has been processed successfully";
-        } catch (SQLException e) {
-            return "Please delete the entries in the Link section associated with this identifier.";
-        }
-    }
-
-    @Override
-    public CompanyDTO update(CompanyDTO companyDTO) {
-        Company company = toCompany(companyDTO);
-        try {
-            return fromCompany(companyDAO.update(company));
-        } catch (SQLException e) {
-            return null;
-        }
-    }
-
-    @Override
-    public String update(CompanyDTO entity, CompanyDTO newEntity) {
-        Company company = toCompany(newEntity);
-        try {
-            return companyDAO.update(company).toString();
-        } catch (SQLException e) {
-            return "An error has occurred, please try to enter data again";
-        }
-    }
-
-    @Override
-    public CompanyDTO getById(int id) {
-        try {
-            return fromCompany(dao.findById(id));
-        } catch (Exception e) {
-            return null;
-        }
-    }
-
-    public Company findById(int id) {
-        try {
-            return dao.findById(id);
-        } catch (Exception e) {
-            return null;
-        }
-    }
-
-    @Override
-    public List<CompanyDTO> getAll() {
-        try {
-            List<Company> companies = companyDAO.getAll();
-            List<CompanyDTO> companiesDTO = new ArrayList<>();
-            for (Company company:companies) {
-                companiesDTO.add(fromCompany(company));
-            }
-            return companiesDTO;
-        } catch (SQLException e) {
-            return null;
-        }
-    }
-
-    @Override
-    public String getAll(CompanyDTO entity) {
-        try {
-            List<Company> companies = companyDAO.getAll();
-            List<CompanyDTO> companiesDTO = new ArrayList<>();
-            for (Company company:companies) {
-                companiesDTO.add(fromCompany(company));
-            }
-            return util.joinListElements(companiesDTO);
-        } catch (SQLException e) {
-            return null;
-        }
-    }
-
-}
Index: src/main/java/ua/goit/dao/CompanyDAO.java
===================================================================
diff --git a/src/main/java/ua/goit/dao/CompanyDAO.java b/src/main/java/ua/goit/dao/CompanyDAO.java
deleted file mode 100644
--- a/src/main/java/ua/goit/dao/CompanyDAO.java	(revision 1a6b14e698b535404112631ff0ae7edd163ae2b0)
+++ /dev/null	(revision 1a6b14e698b535404112631ff0ae7edd163ae2b0)
@@ -1,68 +0,0 @@
-package ua.goit.dao;
-
-import com.zaxxer.hikari.HikariDataSource;
-import ua.goit.dao.model.Company;
-import ua.goit.dao.model.Link;
-
-import java.sql.PreparedStatement;
-import java.sql.ResultSet;
-import java.sql.SQLException;
-
-public class CompanyDAO extends AbstractDAO<Company> {
-
-    @Override
-    protected String getCreateQuery() {
-        return "INSERT INTO companies (company_name, headquarters) VALUES (?, ?)";
-    }
-
-    @Override
-    protected String getUpdateQuery() {
-        return "UPDATE companies SET company_name = ?, headquarters = ? WHERE company_id = ?";
-    }
-
-    @Override
-    protected String getSelectByIdQuery() {
-        return "SELECT company_id, company_name, headquarters FROM companies WHERE company_id = ?";
-    }
-
-    @Override
-    protected PreparedStatement enrichPreparedStatement(HikariDataSource dataSource, Link entity, String command) {
-        return null;
-    }
-
-    @Override
-    protected PreparedStatement enrichUpdatePreparedStatement(HikariDataSource dataSource, Link entity, Link oldEntity) {
-        return null;
-    }
-
-    @Override
-    protected String getDeleteQuery() {
-        return "DELETE FROM companies WHERE company_id = ?";
-    }
-
-    @Override
-    protected String getSelectAllQuery() {
-        return "SELECT company_id, company_name, headquarters FROM companies";
-    }
-
-    @Override
-    protected void sendEntity(PreparedStatement statement, Company object) throws SQLException {
-        if (object.getCompany_id()==null){
-            statement.setString(1, object.getCompany_name());
-            statement.setString(2, object.getHeadquarters());
-        } else{
-            statement.setString(1, object.getCompany_name());
-            statement.setString(2, object.getHeadquarters());
-            statement.setInt(3, object.getCompany_id());
-        }
-    }
-
-    @Override
-    protected Company getEntity(ResultSet resultSet) throws SQLException {
-        Company company = new Company();
-            company.setCompany_id(resultSet.getInt("company_id"));
-            company.setCompany_name(resultSet.getString("company_name"));
-            company.setHeadquarters(resultSet.getString("headquarters"));
-        return company;
-    }
-}
Index: target/classes/SkillDAO.hbm.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/target/classes/SkillDAO.hbm.xml b/target/classes/SkillDAO.hbm.xml
new file mode 100644
--- /dev/null	(date 1627984594500)
+++ b/target/classes/SkillDAO.hbm.xml	(date 1627984594500)
@@ -0,0 +1,19 @@
+<?xml version="1.0"?>
+<!DOCTYPE hibernate-mapping PUBLIC
+        "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
+        "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
+
+<hibernate-mapping package="ua.goit.dao.model">
+    <class name="Skill" table="skills">
+        <id name="skill_id" type="int" column="skill_id">
+            <generator class="identity"></generator>
+        </id>
+        <property name="branch" type="java.lang.String">
+            <column name="branch"/>
+        </property>
+        <property name="stage" type="java.lang.String">
+            <column name="stage"/>
+        </property>
+    </class>
+
+</hibernate-mapping>
\ No newline at end of file
Index: target/classes/ProjectDAO.hbm.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/target/classes/ProjectDAO.hbm.xml b/target/classes/ProjectDAO.hbm.xml
new file mode 100644
--- /dev/null	(date 1627983517725)
+++ b/target/classes/ProjectDAO.hbm.xml	(date 1627983517725)
@@ -0,0 +1,26 @@
+<?xml version='1.0'?>
+<!DOCTYPE hibernate-mapping PUBLIC
+        "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
+        "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
+
+<hibernate-mapping package="ua.goit.dao.model">
+
+    <class name="Project" table="projects">
+        <id name="project_id" type="int" column="project_id" >
+            <generator class="identity"/>
+        </id>
+        <property name="project_name" type="java.lang.String">
+            <column name="project_name" />
+        </property>
+        <property name="project_description" type="java.lang.String">
+            <column name="project_description" />
+        </property>
+        <property name="cost" type="java.lang.Integer">
+            <column name="cost"/>
+        </property>
+        <property name="start_date" type="java.time.LocalDate">
+            <column name="start_date"/>
+        </property>
+    </class>
+
+</hibernate-mapping>
\ No newline at end of file
Index: target/classes/CustomerDAO.hbm.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/target/classes/CustomerDAO.hbm.xml b/target/classes/CustomerDAO.hbm.xml
new file mode 100644
--- /dev/null	(date 1627983517761)
+++ b/target/classes/CustomerDAO.hbm.xml	(date 1627983517761)
@@ -0,0 +1,17 @@
+<?xml version='1.0'?>
+<!DOCTYPE hibernate-mapping PUBLIC
+        "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
+        "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
+
+<hibernate-mapping package="ua.goit.dao.model">
+
+    <class name="Customer" table="customers">
+        <id name="customer_id" type="int" column="customer_id" >
+            <generator class="identity"/>
+        </id>
+        <property name="customer_name" type="java.lang.String">
+            <column name="customer_name" />
+        </property>
+    </class>
+
+</hibernate-mapping>
\ No newline at end of file
Index: target/classes/populateDB.sql
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/target/classes/populateDB.sql b/target/classes/populateDB.sql
new file mode 100644
--- /dev/null	(date 1627987447989)
+++ b/target/classes/populateDB.sql	(date 1627987447989)
@@ -0,0 +1,54 @@
+INSERT INTO developers (first_name, last_name, gender, salary)
+				VALUES ('Denis', 'Ivanov', 'male', 2100),
+					   ('Olga', 'Petrova', 'female', 800),
+					   ('Ivan', 'Denisov', 'male', 1100);
+INSERT INTO projects (project_name, project_description, cost, start_date)
+			  VALUES ('PBB', 'Pocket Bank Bot', 3200, '2020-10-20'),
+				     ('SL', 'SmartLibrary project', 4000, '2019-01-10'),
+				     ('SDB', 'SmartDayBook project', 2900, '2021-05-27');
+INSERT INTO customers (customer_name)
+			   VALUES ('Petr Bubnov'),
+			   		  ('Irina Sokolova'),
+					  ('Vasilii Petrenko');
+INSERT INTO skills (branch, stage)
+			VALUES ('Java', 'Junior'),
+				   ('Java', 'Middle'),
+				   ('Java', 'Senior'),
+				   ('Ruby', 'Junior'),
+				   ('Ruby', 'Middle'),
+				   ('Ruby', 'Senior'),
+				   ('PHP', 'Junior'),
+				   ('PHP', 'Middle'),
+				   ('PHP', 'Senior'),
+				   ('Python', 'Junior'),
+				   ('Python', 'Middle'),
+				   ('Python', 'Senior');
+INSERT INTO companies (company_name, headquarters)
+			   VALUES ('SmartShop', 'USA'),
+			          ('AMAZON', 'USA'),
+		       	      ('ProMANAGENT', 'Ukraine');
+INSERT INTO project_developers (project_id, developer_id)
+			VALUES (1, 3),
+				   (1, 1),
+				   (2, 2),
+				   (2, 3),
+				   (2, 1),
+				   (3, 1),
+				   (3, 2);
+INSERT INTO developer_skills (skill_id, developer_id)
+					VALUES (3, 1),
+						   (4, 1),
+						   (8, 1),
+						   (6, 2),
+						   (9, 2),
+						   (2, 3),
+						   (5, 3),
+						   (8, 3),
+						   (11, 3);
+INSERT INTO customers_companies (customer_id, company_id, project_id)
+						VALUES (1, 3, 3),
+								(1, 3, 1),
+								(2, 1, 2),
+								(2, 2, 3),
+								(3, 3, 1),
+								(3, 1, 2);
\ No newline at end of file
Index: src/main/java/ua/goit/dao/HibernateProjectDAO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ua/goit/dao/HibernateProjectDAO.java b/src/main/java/ua/goit/dao/HibernateProjectDAO.java
new file mode 100644
--- /dev/null	(date 1628098676341)
+++ b/src/main/java/ua/goit/dao/HibernateProjectDAO.java	(date 1628098676341)
@@ -0,0 +1,65 @@
+package ua.goit.dao;
+
+import org.hibernate.Session;
+import org.hibernate.SessionFactory;
+import ua.goit.config.HibernateDatabaseConnector;
+import ua.goit.dao.model.Project;
+
+import java.util.List;
+
+public class HibernateProjectDAO implements HibernateDAO<Project> {
+    private final SessionFactory sessionFactory = HibernateDatabaseConnector.getSessionFactory();
+
+    @Override
+    public Project findById(Integer id) throws Exception {
+        try (Session session = sessionFactory.openSession()) {
+            return session.get(Project.class, id);
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        return null;
+    }
+
+    @Override
+    public void create(Project entity) throws Exception {
+        try (Session session = sessionFactory.openSession()) {
+            session.beginTransaction();
+            session.saveOrUpdate(entity);
+            session.getTransaction().commit();
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+    }
+
+    @Override
+    public void update(Project entity) throws Exception {
+        try (Session session = sessionFactory.openSession()) {
+            session.beginTransaction();
+            session.saveOrUpdate(entity);
+            session.getTransaction().commit();
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+    }
+
+    @Override
+    public void delete(Project entity) throws Exception {
+        try (Session session = sessionFactory.openSession()) {
+            session.beginTransaction();
+            session.delete(entity);
+            session.getTransaction().commit();
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+    }
+
+    @Override
+    public List<Project> getAll() throws Exception {
+        try (Session session = sessionFactory.openSession()) {
+            return session.createQuery("SELECT a FROM Project a", Project.class).getResultList();
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        return null;
+    }
+}
Index: target/classes/hibernate.cfg.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/target/classes/hibernate.cfg.xml b/target/classes/hibernate.cfg.xml
new file mode 100644
--- /dev/null	(date 1627983517745)
+++ b/target/classes/hibernate.cfg.xml	(date 1627983517745)
@@ -0,0 +1,26 @@
+<?xml version='1.0' encoding='utf-8'?>
+<!DOCTYPE hibernate-configuration PUBLIC
+        "-//Hibernate/Hibernate Configuration DTD//EN"
+        "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
+
+<hibernate-configuration>
+    <session-factory>
+        <!-- Database connection settings -->
+        <property name="hibernate.connection.driver_class">org.postgresql.Driver</property>
+        <property name="hibernate.connection.url">jdbc:postgresql://localhost:5432/SQL-Homework</property>
+        <property name="hibernate.connection.username">postgres</property>
+        <property name="hibernate.connection.password">12345</property>
+        <!-- JDBC connection pool (use the built-in) -->
+        <property name="hibernate.connection.pool_size">10</property>
+        <!-- Echo all executed SQL to stdout -->
+        <property name="show_sql">true</property>
+        <!-- SQL dialect -->
+        <property name="dialect">org.hibernate.dialect.PostgreSQL10Dialect</property>
+
+        <mapping resource="DeveloperDAO.hbm.xml"/>
+        <mapping resource="CompanyDAO.hbm.xml"/>
+        <mapping resource="CustomerDAO.hbm.xml"/>
+        <mapping resource="ProjectDAO.hbm.xml"/>
+        <mapping resource="SkillDAO.hbm.xml"/>
+    </session-factory>
+</hibernate-configuration>
\ No newline at end of file
Index: src/main/java/ua/goit/service/HibernateCompanyService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ua.goit.service;\r\n\r\nimport ua.goit.config.HibernateDatabaseConnector;\r\nimport ua.goit.dao.HibernateCompanyDAO;\r\nimport ua.goit.dao.model.Company;\r\nimport ua.goit.view.Util;\r\n\r\nimport java.util.List;\r\n\r\npublic class HibernateCompanyService {\r\n    private final HibernateCompanyDAO dao;\r\n\r\n    public HibernateCompanyService() {\r\n        dao = new HibernateCompanyDAO(HibernateDatabaseConnector.getSessionFactory());\r\n    }\r\n\r\n    public String findById(int id) {\r\n        try {\r\n            return dao.findById(id).toString();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            return \"An error has occurred, please resend the request\";\r\n        }\r\n    }\r\n\r\n    public String create(Company company) {\r\n        try {\r\n            dao.create(company);\r\n            return \"Your request has been processed successfully\";\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            return \"An error has occurred, please resend the request\";\r\n        }\r\n    }\r\n\r\n    public String update(Company company) {\r\n        try {\r\n            dao.update(company);\r\n            return dao.findById(company.getCompany_id()).toString();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            return \"An error has occurred, please resend the request\";\r\n        }\r\n    }\r\n\r\n    public String delete(Company company){\r\n        try {\r\n            dao.delete(company);\r\n            return \"Your request has been processed successfully\";\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            return \"An error has occurred, please resend the request\";\r\n        }\r\n    }\r\n\r\n    public String getAll() {\r\n        try {\r\n            List<Company> companies = dao.getAll();\r\n            return Util.joinListElements(companies);\r\n        } catch (Exception e){\r\n            e.printStackTrace();\r\n            return \"An error has occurred, please resend the request\";\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ua/goit/service/HibernateCompanyService.java b/src/main/java/ua/goit/service/HibernateCompanyService.java
--- a/src/main/java/ua/goit/service/HibernateCompanyService.java	(revision 1a6b14e698b535404112631ff0ae7edd163ae2b0)
+++ b/src/main/java/ua/goit/service/HibernateCompanyService.java	(date 1628098676386)
@@ -1,20 +1,16 @@
 package ua.goit.service;
 
-import ua.goit.config.HibernateDatabaseConnector;
 import ua.goit.dao.HibernateCompanyDAO;
 import ua.goit.dao.model.Company;
 import ua.goit.view.Util;
 
 import java.util.List;
 
-public class HibernateCompanyService {
-    private final HibernateCompanyDAO dao;
+public class HibernateCompanyService implements HibernateService<Company>{
+    private final HibernateCompanyDAO dao = new HibernateCompanyDAO();
 
-    public HibernateCompanyService() {
-        dao = new HibernateCompanyDAO(HibernateDatabaseConnector.getSessionFactory());
-    }
-
-    public String findById(int id) {
+    @Override
+    public String findById(Integer id) {
         try {
             return dao.findById(id).toString();
         } catch (Exception e) {
@@ -23,6 +19,7 @@
         }
     }
 
+    @Override
     public String create(Company company) {
         try {
             dao.create(company);
@@ -33,6 +30,7 @@
         }
     }
 
+    @Override
     public String update(Company company) {
         try {
             dao.update(company);
@@ -43,6 +41,7 @@
         }
     }
 
+    @Override
     public String delete(Company company){
         try {
             dao.delete(company);
@@ -53,6 +52,7 @@
         }
     }
 
+    @Override
     public String getAll() {
         try {
             List<Company> companies = dao.getAll();
Index: src/main/java/ua/goit/controller/findServlets/FindCompanyServlet.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ua.goit.controller.findServlets;\r\n\r\nimport ua.goit.dto.CompanyDTO;\r\nimport ua.goit.service.CompanyService;\r\n\r\nimport javax.servlet.ServletException;\r\nimport javax.servlet.annotation.WebServlet;\r\nimport javax.servlet.http.HttpServlet;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport java.io.IOException;\r\n\r\n@WebServlet(\"/company\")\r\npublic class FindCompanyServlet extends HttpServlet {\r\n    private final CompanyService service = new CompanyService();\r\n\r\n    @Override\r\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\r\n        req.getRequestDispatcher(\"/view/findById/findCompany.jsp\").forward(req, resp);\r\n    }\r\n\r\n    @Override\r\n    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\r\n        CompanyDTO result = service.getById(Integer.parseInt(req.getParameter(\"companyID\")));\r\n        req.setAttribute(\"result\", result);\r\n        req.getRequestDispatcher(\"/view/print/printCompany.jsp\").forward(req, resp);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ua/goit/controller/findServlets/FindCompanyServlet.java b/src/main/java/ua/goit/controller/findServlets/FindCompanyServlet.java
--- a/src/main/java/ua/goit/controller/findServlets/FindCompanyServlet.java	(revision 1a6b14e698b535404112631ff0ae7edd163ae2b0)
+++ b/src/main/java/ua/goit/controller/findServlets/FindCompanyServlet.java	(date 1628076703006)
@@ -1,7 +1,6 @@
 package ua.goit.controller.findServlets;
 
 import ua.goit.dto.CompanyDTO;
-import ua.goit.service.CompanyService;
 
 import javax.servlet.ServletException;
 import javax.servlet.annotation.WebServlet;
Index: .idea/jarRepositories.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/jarRepositories.xml b/.idea/jarRepositories.xml
new file mode 100644
--- /dev/null	(date 1628004089751)
+++ b/.idea/jarRepositories.xml	(date 1628004089751)
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="RemoteRepositoriesConfiguration">
+    <remote-repository>
+      <option name="id" value="central" />
+      <option name="name" value="Central Repository" />
+      <option name="url" value="https://repo.maven.apache.org/maven2" />
+    </remote-repository>
+    <remote-repository>
+      <option name="id" value="central" />
+      <option name="name" value="Maven Central repository" />
+      <option name="url" value="https://repo1.maven.org/maven2" />
+    </remote-repository>
+    <remote-repository>
+      <option name="id" value="jboss.community" />
+      <option name="name" value="JBoss Community repository" />
+      <option name="url" value="https://repository.jboss.org/nexus/content/repositories/public/" />
+    </remote-repository>
+  </component>
+</project>
\ No newline at end of file
Index: src/main/java/ua/goit/controller/createServlets/AddCompanyServlet.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ua.goit.controller.createServlets;\r\n\r\nimport ua.goit.dto.CompanyDTO;\r\nimport ua.goit.service.CompanyService;\r\nimport ua.goit.service.HibernateCompanyService;\r\n\r\nimport javax.servlet.ServletException;\r\nimport javax.servlet.annotation.WebServlet;\r\nimport javax.servlet.http.HttpServlet;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport java.io.IOException;\r\n\r\nimport static ua.goit.service.Converter.toCompany;\r\n\r\n@WebServlet(\"/addCompany\")\r\npublic class AddCompanyServlet extends HttpServlet {\r\n    private final HibernateCompanyService hibernateCompanyService = new HibernateCompanyService();\r\n    private final CompanyService service = new CompanyService();\r\n\r\n    @Override\r\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\r\n        req.getRequestDispatcher(\"/view/create/addCompany.jsp\").forward(req, resp);\r\n    }\r\n\r\n    @Override\r\n    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\r\n        CompanyDTO dto = new CompanyDTO();\r\n        dto.setCompany_name(req.getParameter(\"companyName\"));\r\n        dto.setHeadquarters(req.getParameter(\"headquarters\"));\r\n        /*\r\n            CompanyDTO companyDTO = service.create(dto);\r\n            req.setAttribute(\"result\", companyDTO);\r\n            req.getRequestDispatcher(\"/view/print/printCompany.jsp\").forward(req, resp);\r\n         */\r\n        req.setAttribute(\"result\", hibernateCompanyService.create(toCompany(dto)));\r\n        req.getRequestDispatcher(\"/view/print/printMessage.jsp\").forward(req, resp);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ua/goit/controller/createServlets/AddCompanyServlet.java b/src/main/java/ua/goit/controller/createServlets/AddCompanyServlet.java
--- a/src/main/java/ua/goit/controller/createServlets/AddCompanyServlet.java	(revision 1a6b14e698b535404112631ff0ae7edd163ae2b0)
+++ b/src/main/java/ua/goit/controller/createServlets/AddCompanyServlet.java	(date 1628076702985)
@@ -1,7 +1,6 @@
 package ua.goit.controller.createServlets;
 
 import ua.goit.dto.CompanyDTO;
-import ua.goit.service.CompanyService;
 import ua.goit.service.HibernateCompanyService;
 
 import javax.servlet.ServletException;
Index: .idea/runConfigurations.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/runConfigurations.xml b/.idea/runConfigurations.xml
new file mode 100644
--- /dev/null	(date 1628004089770)
+++ b/.idea/runConfigurations.xml	(date 1628004089770)
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="RunConfigurationProducerService">
+    <option name="ignoredProducers">
+      <set>
+        <option value="com.android.tools.idea.compose.preview.runconfiguration.ComposePreviewRunConfigurationProducer" />
+      </set>
+    </option>
+  </component>
+</project>
\ No newline at end of file
Index: target/classes/initDB.sql
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/target/classes/initDB.sql b/target/classes/initDB.sql
new file mode 100644
--- /dev/null	(date 1627927749308)
+++ b/target/classes/initDB.sql	(date 1627927749308)
@@ -0,0 +1,53 @@
+CREATE TABLE customers(
+	customer_id SERIAL PRIMARY KEY,
+ 	customer_name VARCHAR(100) NOT NULL
+	);
+CREATE TABLE companies(
+	company_id SERIAL PRIMARY KEY,
+	company_name VARCHAR(100) NOT NULL,
+	headquarters VARCHAR(100)
+	);
+CREATE TABLE projects(
+	project_id SERIAL PRIMARY KEY,
+	project_name VARCHAR(100) NOT NULL,
+	project_description VARCHAR(100),
+	cost INTEGER,
+	start_date DATE
+	);
+
+CREATE TABLE customers_companies(
+	customer_id int NOT NULL,
+	company_id int NOT NULL,
+	project_id int NOT NULL,
+	FOREIGN KEY (customer_id) REFERENCES customers(customer_id),
+	FOREIGN KEY (company_id) REFERENCES companies(company_id),
+	FOREIGN KEY (project_id) REFERENCES projects(project_id),
+	UNIQUE (customer_id, company_id, project_id)
+	);
+CREATE TABLE developers(
+	developer_id SERIAL PRIMARY KEY,
+	first_name VARCHAR(100) NOT NULL,
+	last_name VARCHAR(100) NOT NULL,
+	gender VARCHAR(6),
+	salary INTEGER
+	);
+CREATE TABLE project_developers(
+	project_id int NOT NULL,
+	developer_id int NOT NULL,
+	FOREIGN KEY (project_id) REFERENCES projects(project_id),
+	FOREIGN KEY (developer_id) REFERENCES developers(developer_id),
+	UNIQUE (project_id, developer_id)
+	);
+CREATE TABLE skills(
+	skill_id SERIAL PRIMARY KEY,
+	branch VARCHAR(50) NOT NULL,
+	stage VARCHAR(20)
+	);
+CREATE TABLE developer_skills(
+	skill_id int NOT NULL,
+	developer_id int NOT NULL,
+	FOREIGN KEY (skill_id) REFERENCES skills(skill_id),
+	FOREIGN KEY (developer_id) REFERENCES developers(developer_id),
+	UNIQUE (skill_id, developer_id)
+);
+
Index: src/main/java/ua/goit/controller/deleteServlets/DeleteCompanyServlet.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ua.goit.controller.deleteServlets;\r\n\r\nimport ua.goit.dto.CompanyDTO;\r\nimport ua.goit.service.CompanyService;\r\n\r\nimport javax.servlet.ServletException;\r\nimport javax.servlet.annotation.WebServlet;\r\nimport javax.servlet.http.HttpServlet;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport java.io.IOException;\r\n\r\n@WebServlet(\"/deleteCompany\")\r\npublic class DeleteCompanyServlet extends HttpServlet {\r\n    private final CompanyService service = new CompanyService();\r\n\r\n    @Override\r\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\r\n        req.getRequestDispatcher(\"/view/delete/deleteCompany.jsp\").forward(req, resp);\r\n    }\r\n\r\n    @Override\r\n    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\r\n        CompanyDTO companyDTO = new CompanyDTO();\r\n        companyDTO.setCompany_id(Integer.parseInt(req.getParameter(\"companyID\")));\r\n        String result = service.delete(companyDTO);\r\n        req.setAttribute(\"result\", result);\r\n        req.getRequestDispatcher(\"/view/print/printMessage.jsp\").forward(req, resp);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ua/goit/controller/deleteServlets/DeleteCompanyServlet.java b/src/main/java/ua/goit/controller/deleteServlets/DeleteCompanyServlet.java
--- a/src/main/java/ua/goit/controller/deleteServlets/DeleteCompanyServlet.java	(revision 1a6b14e698b535404112631ff0ae7edd163ae2b0)
+++ b/src/main/java/ua/goit/controller/deleteServlets/DeleteCompanyServlet.java	(date 1628076703041)
@@ -1,7 +1,7 @@
 package ua.goit.controller.deleteServlets;
 
 import ua.goit.dto.CompanyDTO;
-import ua.goit.service.CompanyService;
+import ua.goit.service.HibernateCompanyService;
 
 import javax.servlet.ServletException;
 import javax.servlet.annotation.WebServlet;
@@ -10,9 +10,12 @@
 import javax.servlet.http.HttpServletResponse;
 import java.io.IOException;
 
+import static ua.goit.service.Converter.toCompany;
+
 @WebServlet("/deleteCompany")
 public class DeleteCompanyServlet extends HttpServlet {
     private final CompanyService service = new CompanyService();
+    private final HibernateCompanyService hibernateCompanyService = new HibernateCompanyService();
 
     @Override
     protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
@@ -23,8 +26,10 @@
     protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
         CompanyDTO companyDTO = new CompanyDTO();
         companyDTO.setCompany_id(Integer.parseInt(req.getParameter("companyID")));
-        String result = service.delete(companyDTO);
-        req.setAttribute("result", result);
+        /*
+            String result = service.delete(companyDTO);
+         */
+        req.setAttribute("result", hibernateCompanyService.delete(toCompany(companyDTO)));
         req.getRequestDispatcher("/view/print/printMessage.jsp").forward(req, resp);
     }
 }
Index: .idea/uiDesigner.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/uiDesigner.xml b/.idea/uiDesigner.xml
new file mode 100644
--- /dev/null	(date 1628088905544)
+++ b/.idea/uiDesigner.xml	(date 1628088905544)
@@ -0,0 +1,124 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="Palette2">
+    <group name="Swing">
+      <item class="com.intellij.uiDesigner.HSpacer" tooltip-text="Horizontal Spacer" icon="/com/intellij/uiDesigner/icons/hspacer.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="1" hsize-policy="6" anchor="0" fill="1" />
+      </item>
+      <item class="com.intellij.uiDesigner.VSpacer" tooltip-text="Vertical Spacer" icon="/com/intellij/uiDesigner/icons/vspacer.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="1" anchor="0" fill="2" />
+      </item>
+      <item class="javax.swing.JPanel" icon="/com/intellij/uiDesigner/icons/panel.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JScrollPane" icon="/com/intellij/uiDesigner/icons/scrollPane.png" removable="false" auto-create-binding="false" can-attach-label="true">
+        <default-constraints vsize-policy="7" hsize-policy="7" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JButton" icon="/com/intellij/uiDesigner/icons/button.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="0" fill="1" />
+        <initial-values>
+          <property name="text" value="Button" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JRadioButton" icon="/com/intellij/uiDesigner/icons/radioButton.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="RadioButton" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JCheckBox" icon="/com/intellij/uiDesigner/icons/checkBox.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="CheckBox" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JLabel" icon="/com/intellij/uiDesigner/icons/label.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="0" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="Label" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JTextField" icon="/com/intellij/uiDesigner/icons/textField.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JPasswordField" icon="/com/intellij/uiDesigner/icons/passwordField.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JFormattedTextField" icon="/com/intellij/uiDesigner/icons/formattedTextField.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTextArea" icon="/com/intellij/uiDesigner/icons/textArea.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTextPane" icon="/com/intellij/uiDesigner/icons/textPane.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JEditorPane" icon="/com/intellij/uiDesigner/icons/editorPane.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JComboBox" icon="/com/intellij/uiDesigner/icons/comboBox.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="2" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JTable" icon="/com/intellij/uiDesigner/icons/table.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JList" icon="/com/intellij/uiDesigner/icons/list.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="2" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTree" icon="/com/intellij/uiDesigner/icons/tree.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTabbedPane" icon="/com/intellij/uiDesigner/icons/tabbedPane.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
+          <preferred-size width="200" height="200" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JSplitPane" icon="/com/intellij/uiDesigner/icons/splitPane.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
+          <preferred-size width="200" height="200" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JSpinner" icon="/com/intellij/uiDesigner/icons/spinner.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JSlider" icon="/com/intellij/uiDesigner/icons/slider.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JSeparator" icon="/com/intellij/uiDesigner/icons/separator.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JProgressBar" icon="/com/intellij/uiDesigner/icons/progressbar.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1" />
+      </item>
+      <item class="javax.swing.JToolBar" icon="/com/intellij/uiDesigner/icons/toolbar.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1">
+          <preferred-size width="-1" height="20" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JToolBar$Separator" icon="/com/intellij/uiDesigner/icons/toolbarSeparator.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="0" anchor="0" fill="1" />
+      </item>
+      <item class="javax.swing.JScrollBar" icon="/com/intellij/uiDesigner/icons/scrollbar.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="0" anchor="0" fill="2" />
+      </item>
+    </group>
+  </component>
+</project>
\ No newline at end of file
Index: src/main/java/ua/goit/service/HibernateSkillService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ua/goit/service/HibernateSkillService.java b/src/main/java/ua/goit/service/HibernateSkillService.java
new file mode 100644
--- /dev/null	(date 1628098676408)
+++ b/src/main/java/ua/goit/service/HibernateSkillService.java	(date 1628098676408)
@@ -0,0 +1,67 @@
+package ua.goit.service;
+
+import ua.goit.dao.HibernateSkillDAO;
+import ua.goit.dao.model.Skill;
+import ua.goit.view.Util;
+
+import java.util.List;
+
+public class HibernateSkillService implements HibernateService<Skill>{
+    private final HibernateSkillDAO dao = new HibernateSkillDAO();
+
+    @Override
+    public String create(Skill entity) {
+        try {
+            dao.create(entity);
+            return "Your request has been processed successfully";
+        } catch (Exception e) {
+            e.printStackTrace();
+            return "An error has occurred, please resend the request";
+        }
+    }
+
+    @Override
+    public String delete(Skill entity) {
+        try {
+            dao.delete(entity);
+            return "Your request has been processed successfully";
+        } catch (Exception e) {
+            e.printStackTrace();
+            return "An error has occurred, please resend the request";
+        }
+    }
+
+    @Override
+    public String update(Skill entity) {
+        try {
+            dao.update(entity);
+            return dao.findById(entity.getSkill_id()).toString();
+        } catch (Exception e) {
+            e.printStackTrace();
+            return "An error has occurred, please resend the request";
+        }
+
+    }
+
+    @Override
+    public String findById(Integer id) {
+        try {
+            return dao.findById(id).toString();
+        } catch (Exception e) {
+            e.printStackTrace();
+            return "An error has occurred, please resend the request";
+        }
+    }
+
+    @Override
+    public String getAll() {
+        try {
+            List<Skill> skills = dao.getAll();
+            return Util.joinListElements(skills);
+        } catch (Exception e){
+            e.printStackTrace();
+            return "An error has occurred, please resend the request";
+        }
+
+    }
+}
Index: src/main/java/ua/goit/service/HibernateService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ua/goit/service/HibernateService.java b/src/main/java/ua/goit/service/HibernateService.java
new file mode 100644
--- /dev/null	(date 1628088905345)
+++ b/src/main/java/ua/goit/service/HibernateService.java	(date 1628088905345)
@@ -0,0 +1,9 @@
+package ua.goit.service;
+
+public interface HibernateService<T> {
+    String create(T entity);
+    String delete(T entity);
+    String update(T entity);
+    String findById(Integer id);
+    String getAll();
+}
Index: src/main/java/ua/goit/controller/getAllServlets/CompaniesServlet.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ua.goit.controller.getAllServlets;\r\n\r\nimport ua.goit.dto.CompanyDTO;\r\nimport ua.goit.service.CompanyService;\r\n\r\nimport javax.servlet.ServletException;\r\nimport javax.servlet.annotation.WebServlet;\r\nimport javax.servlet.http.HttpServlet;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\n@WebServlet(\"/companies\")\r\npublic class CompaniesServlet extends HttpServlet {\r\n    private CompanyService companyService = new CompanyService();\r\n    @Override\r\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\r\n        List<CompanyDTO> companies = companyService.getAll();\r\n        req.setAttribute(\"companies\", companies);\r\n        req.getRequestDispatcher(\"/view/getAll/companies.jsp\").forward(req, resp);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ua/goit/controller/getAllServlets/CompaniesServlet.java b/src/main/java/ua/goit/controller/getAllServlets/CompaniesServlet.java
--- a/src/main/java/ua/goit/controller/getAllServlets/CompaniesServlet.java	(revision 1a6b14e698b535404112631ff0ae7edd163ae2b0)
+++ b/src/main/java/ua/goit/controller/getAllServlets/CompaniesServlet.java	(date 1628076703034)
@@ -1,7 +1,6 @@
 package ua.goit.controller.getAllServlets;
 
-import ua.goit.dto.CompanyDTO;
-import ua.goit.service.CompanyService;
+import ua.goit.service.HibernateCompanyService;
 
 import javax.servlet.ServletException;
 import javax.servlet.annotation.WebServlet;
@@ -9,15 +8,20 @@
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 import java.io.IOException;
-import java.util.List;
 
 @WebServlet("/companies")
 public class CompaniesServlet extends HttpServlet {
     private CompanyService companyService = new CompanyService();
+    private final HibernateCompanyService service = new HibernateCompanyService();
+
     @Override
     protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
-        List<CompanyDTO> companies = companyService.getAll();
-        req.setAttribute("companies", companies);
-        req.getRequestDispatcher("/view/getAll/companies.jsp").forward(req, resp);
+        /*
+            List<CompanyDTO> companies = companyService.getAll();
+            req.setAttribute("companies", companies);
+        */
+
+        req.setAttribute("result", service.getAll());
+        req.getRequestDispatcher("/view/print/printMessage.jsp").forward(req, resp);
     }
 }
Index: src/main/java/ua/goit/service/HibernateProjectService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ua/goit/service/HibernateProjectService.java b/src/main/java/ua/goit/service/HibernateProjectService.java
new file mode 100644
--- /dev/null	(date 1628098676438)
+++ b/src/main/java/ua/goit/service/HibernateProjectService.java	(date 1628098676438)
@@ -0,0 +1,65 @@
+package ua.goit.service;
+
+import ua.goit.dao.HibernateProjectDAO;
+import ua.goit.dao.model.Project;
+import ua.goit.view.Util;
+
+import java.util.List;
+
+public class HibernateProjectService implements HibernateService<Project> {
+    private final HibernateProjectDAO dao = new HibernateProjectDAO();
+
+    @Override
+    public String create(Project entity) {
+        try {
+            dao.create(entity);
+            return "Your request has been processed successfully";
+        } catch (Exception e) {
+            e.printStackTrace();
+            return "An error has occurred, please resend the request";
+        }
+    }
+
+    @Override
+    public String delete(Project entity) {
+        try {
+            dao.delete(entity);
+            return "Your request has been processed successfully";
+        } catch (Exception e) {
+            e.printStackTrace();
+            return "An error has occurred, please resend the request";
+        }
+    }
+
+    @Override
+    public String update(Project entity) {
+        try {
+            dao.update(entity);
+            return dao.findById(entity.getProject_id()).toString();
+        } catch (Exception e) {
+            e.printStackTrace();
+            return "An error has occurred, please resend the request";
+        }
+    }
+
+    @Override
+    public String findById(Integer id) {
+        try {
+            return dao.findById(id).toString();
+        } catch (Exception e) {
+            e.printStackTrace();
+            return "An error has occurred, please resend the request";
+        }
+    }
+
+    @Override
+    public String getAll() {
+        try {
+            List<Project> projects = dao.getAll();
+            return Util.joinListElements(projects);
+        } catch (Exception e){
+            e.printStackTrace();
+            return "An error has occurred, please resend the request";
+        }
+    }
+}
Index: src/main/java/ua/goit/service/HibernateDeveloperService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ua/goit/service/HibernateDeveloperService.java b/src/main/java/ua/goit/service/HibernateDeveloperService.java
new file mode 100644
--- /dev/null	(date 1628098676374)
+++ b/src/main/java/ua/goit/service/HibernateDeveloperService.java	(date 1628098676374)
@@ -0,0 +1,65 @@
+package ua.goit.service;
+
+import ua.goit.dao.HibernateDeveloperDAO;
+import ua.goit.dao.model.Developer;
+import ua.goit.view.Util;
+
+import java.util.List;
+
+public class HibernateDeveloperService implements HibernateService<Developer>{
+    private final HibernateDeveloperDAO dao = new HibernateDeveloperDAO();
+
+    @Override
+    public String create(Developer entity) {
+        try {
+            dao.create(entity);
+            return "Your request has been processed successfully";
+        } catch (Exception e) {
+            e.printStackTrace();
+            return "An error has occurred, please resend the request";
+        }
+    }
+
+    @Override
+    public String delete(Developer entity) {
+        try {
+            dao.delete(entity);
+            return "Your request has been processed successfully";
+        } catch (Exception e) {
+            e.printStackTrace();
+            return "An error has occurred, please resend the request";
+        }
+    }
+
+    @Override
+    public String update(Developer entity) {
+        try {
+            dao.update(entity);
+            return dao.findById(entity.getDeveloper_id()).toString();
+        } catch (Exception e) {
+            e.printStackTrace();
+            return "An error has occurred, please resend the request";
+        }
+    }
+
+    @Override
+    public String findById(Integer id) {
+        try {
+            return dao.findById(id).toString();
+        } catch (Exception e) {
+            e.printStackTrace();
+            return "An error has occurred, please resend the request";
+        }
+    }
+
+    @Override
+    public String getAll() {
+        try {
+            List<Developer> developers = dao.getAll();
+            return Util.joinListElements(developers);
+        } catch (Exception e){
+            e.printStackTrace();
+            return "An error has occurred, please resend the request";
+        }
+    }
+}
Index: src/main/java/ua/goit/dao/HibernateCustomerDAO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ua/goit/dao/HibernateCustomerDAO.java b/src/main/java/ua/goit/dao/HibernateCustomerDAO.java
new file mode 100644
--- /dev/null	(date 1628098676398)
+++ b/src/main/java/ua/goit/dao/HibernateCustomerDAO.java	(date 1628098676398)
@@ -0,0 +1,65 @@
+package ua.goit.dao;
+
+import org.hibernate.Session;
+import org.hibernate.SessionFactory;
+import ua.goit.config.HibernateDatabaseConnector;
+import ua.goit.dao.model.Customer;
+
+import java.util.List;
+
+public class HibernateCustomerDAO implements HibernateDAO<Customer> {
+    private final SessionFactory sessionFactory = HibernateDatabaseConnector.getSessionFactory();
+
+    @Override
+    public Customer findById(Integer id) throws Exception {
+        try (Session session = sessionFactory.openSession()) {
+            return session.get(Customer.class, id);
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        return null;
+    }
+
+    @Override
+    public void create(Customer entity) throws Exception {
+        try (Session session = sessionFactory.openSession()) {
+            session.beginTransaction();
+            session.saveOrUpdate(entity);
+            session.getTransaction().commit();
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+    }
+
+    @Override
+    public void update(Customer entity) throws Exception {
+        try (Session session = sessionFactory.openSession()) {
+            session.beginTransaction();
+            session.saveOrUpdate(entity);
+            session.getTransaction().commit();
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+    }
+
+    @Override
+    public void delete(Customer entity) throws Exception {
+        try (Session session = sessionFactory.openSession()) {
+            session.beginTransaction();
+            session.saveOrUpdate(entity);
+            session.getTransaction().commit();
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+    }
+
+    @Override
+    public List<Customer> getAll() throws Exception {
+        try (Session session = sessionFactory.openSession()) {
+            return session.createQuery("SELECT a FROM Customer a", Customer.class).getResultList();
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        return null;
+    }
+}
Index: target/classes/DeveloperDAO.hbm.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/target/classes/DeveloperDAO.hbm.xml b/target/classes/DeveloperDAO.hbm.xml
new file mode 100644
--- /dev/null	(date 1627928619010)
+++ b/target/classes/DeveloperDAO.hbm.xml	(date 1627928619010)
@@ -0,0 +1,26 @@
+<?xml version='1.0'?>
+<!DOCTYPE hibernate-mapping PUBLIC
+        "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
+        "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
+
+<hibernate-mapping package="ua.goit.dao.model">
+
+    <class name="Developer" table="developers">
+        <id name="developer_id" type="int" column="developer_id" >
+            <generator class="identity"/>
+        </id>
+        <property name="first_name" type="java.lang.String">
+            <column name="first_name" />
+        </property>
+        <property name="last_name" type="java.lang.String">
+            <column name="last_name" />
+        </property>
+        <property name="gender" type="java.lang.String">
+            <column name="gender" />
+        </property>
+        <property name="salary" type="java.lang.Integer">
+            <column name="salary" />
+        </property>
+    </class>
+
+</hibernate-mapping>
\ No newline at end of file
Index: src/main/java/ua/goit/service/HibernateCustomerService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ua/goit/service/HibernateCustomerService.java b/src/main/java/ua/goit/service/HibernateCustomerService.java
new file mode 100644
--- /dev/null	(date 1628098676418)
+++ b/src/main/java/ua/goit/service/HibernateCustomerService.java	(date 1628098676418)
@@ -0,0 +1,65 @@
+package ua.goit.service;
+
+import ua.goit.dao.HibernateCustomerDAO;
+import ua.goit.dao.model.Customer;
+import ua.goit.view.Util;
+
+import java.util.List;
+
+public class HibernateCustomerService implements HibernateService<Customer> {
+    private final HibernateCustomerDAO dao = new HibernateCustomerDAO();
+
+    @Override
+    public String create(Customer entity) {
+        try {
+            dao.create(entity);
+            return "Your request has been processed successfully";
+        } catch (Exception e) {
+            e.printStackTrace();
+            return "An error has occurred, please resend the request";
+        }
+    }
+
+    @Override
+    public String delete(Customer entity) {
+        try {
+            dao.delete(entity);
+            return "Your request has been processed successfully";
+        } catch (Exception e) {
+            e.printStackTrace();
+            return "An error has occurred, please resend the request";
+        }
+    }
+
+    @Override
+    public String update(Customer entity) {
+        try {
+            dao.update(entity);
+            return dao.findById(entity.getCustomer_id()).toString();
+        } catch (Exception e) {
+            e.printStackTrace();
+            return "An error has occurred, please resend the request";
+        }
+    }
+
+    @Override
+    public String findById(Integer id) {
+        try {
+            return dao.findById(id).toString();
+        } catch (Exception e) {
+            e.printStackTrace();
+            return "An error has occurred, please resend the request";
+        }
+    }
+
+    @Override
+    public String getAll() {
+        try {
+            List<Customer> customers = dao.getAll();
+            return Util.joinListElements(customers);
+        } catch (Exception e){
+            e.printStackTrace();
+            return "An error has occurred, please resend the request";
+        }
+    }
+}
Index: src/main/java/ua/goit/dao/HibernateDAO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ua/goit/dao/HibernateDAO.java b/src/main/java/ua/goit/dao/HibernateDAO.java
new file mode 100644
--- /dev/null	(date 1628076703024)
+++ b/src/main/java/ua/goit/dao/HibernateDAO.java	(date 1628076703024)
@@ -0,0 +1,11 @@
+package ua.goit.dao;
+
+import java.util.List;
+
+public interface HibernateDAO<T> {
+    T findById(Integer id) throws Exception;
+    void create(T entity) throws Exception;
+    void update(T entity) throws Exception;
+    void delete(T entity) throws Exception;
+    List<T> getAll() throws Exception;
+}
Index: src/main/java/ua/goit/dao/HibernateSkillDAO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ua/goit/dao/HibernateSkillDAO.java b/src/main/java/ua/goit/dao/HibernateSkillDAO.java
new file mode 100644
--- /dev/null	(date 1628098676364)
+++ b/src/main/java/ua/goit/dao/HibernateSkillDAO.java	(date 1628098676364)
@@ -0,0 +1,65 @@
+package ua.goit.dao;
+
+import org.hibernate.Session;
+import org.hibernate.SessionFactory;
+import ua.goit.config.HibernateDatabaseConnector;
+import ua.goit.dao.model.Skill;
+
+import java.util.List;
+
+public class HibernateSkillDAO implements HibernateDAO<Skill>{
+    private final SessionFactory sessionFactory = HibernateDatabaseConnector.getSessionFactory();
+
+    @Override
+    public Skill findById(Integer id) throws Exception {
+        try (Session session = sessionFactory.openSession()) {
+            return session.get(Skill.class, id);
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        return null;
+    }
+
+    @Override
+    public void create(Skill entity) throws Exception {
+        try (Session session = sessionFactory.openSession()) {
+            session.beginTransaction();
+            session.saveOrUpdate(entity);
+            session.getTransaction().commit();
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+    }
+
+    @Override
+    public void update(Skill entity) throws Exception {
+        try (Session session = sessionFactory.openSession()) {
+            session.beginTransaction();
+            session.saveOrUpdate(entity);
+            session.getTransaction().commit();
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+    }
+
+    @Override
+    public void delete(Skill entity) throws Exception {
+        try (Session session = sessionFactory.openSession()) {
+            session.beginTransaction();
+            session.delete(entity);
+            session.getTransaction().commit();
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+    }
+
+    @Override
+    public List<Skill> getAll() throws Exception {
+        try (Session session = sessionFactory.openSession()) {
+            return session.createQuery("SELECT a FROM Skill a", Skill.class).getResultList();
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        return null;
+    }
+}
Index: src/main/java/ua/goit/controller/updateServlets/UpdateCompanyServlet.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ua.goit.controller.updateServlets;\r\n\r\nimport ua.goit.dto.CompanyDTO;\r\nimport ua.goit.service.CompanyService;\r\n\r\nimport javax.servlet.ServletException;\r\nimport javax.servlet.annotation.WebServlet;\r\nimport javax.servlet.http.HttpServlet;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport java.io.IOException;\r\n\r\n@WebServlet(\"/updateCompany\")\r\npublic class UpdateCompanyServlet extends HttpServlet {\r\n    private final CompanyService service = new CompanyService();\r\n\r\n    @Override\r\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\r\n        req.getRequestDispatcher(\"/view/update/updateCompany.jsp\").forward(req, resp);\r\n    }\r\n\r\n    @Override\r\n    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\r\n        CompanyDTO dto = new CompanyDTO();\r\n        dto.setCompany_id(Integer.parseInt(req.getParameter(\"companyId\")));\r\n        dto.setCompany_name(req.getParameter(\"companyName\"));\r\n        dto.setHeadquarters(req.getParameter(\"headquarters\"));\r\n        CompanyDTO companyDTO = service.update(dto);\r\n        req.setAttribute(\"result\", companyDTO);\r\n        req.getRequestDispatcher(\"/view/print/printCompany.jsp\").forward(req, resp);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ua/goit/controller/updateServlets/UpdateCompanyServlet.java b/src/main/java/ua/goit/controller/updateServlets/UpdateCompanyServlet.java
--- a/src/main/java/ua/goit/controller/updateServlets/UpdateCompanyServlet.java	(revision 1a6b14e698b535404112631ff0ae7edd163ae2b0)
+++ b/src/main/java/ua/goit/controller/updateServlets/UpdateCompanyServlet.java	(date 1628076703016)
@@ -1,7 +1,7 @@
 package ua.goit.controller.updateServlets;
 
 import ua.goit.dto.CompanyDTO;
-import ua.goit.service.CompanyService;
+import ua.goit.service.HibernateCompanyService;
 
 import javax.servlet.ServletException;
 import javax.servlet.annotation.WebServlet;
@@ -10,9 +10,12 @@
 import javax.servlet.http.HttpServletResponse;
 import java.io.IOException;
 
+import static ua.goit.service.Converter.toCompany;
+
 @WebServlet("/updateCompany")
 public class UpdateCompanyServlet extends HttpServlet {
     private final CompanyService service = new CompanyService();
+    private final HibernateCompanyService hibernateCompanyService = new HibernateCompanyService();
 
     @Override
     protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
@@ -25,8 +28,9 @@
         dto.setCompany_id(Integer.parseInt(req.getParameter("companyId")));
         dto.setCompany_name(req.getParameter("companyName"));
         dto.setHeadquarters(req.getParameter("headquarters"));
-        CompanyDTO companyDTO = service.update(dto);
-        req.setAttribute("result", companyDTO);
-        req.getRequestDispatcher("/view/print/printCompany.jsp").forward(req, resp);
+        //CompanyDTO companyDTO = service.update(dto);
+        //req.setAttribute("result", companyDTO);
+        req.setAttribute("result", hibernateCompanyService.update(toCompany(dto)));
+        req.getRequestDispatcher("/view/print/printMessage.jsp").forward(req, resp);
     }
 }
Index: src/main/java/ua/goit/dao/HibernateDeveloperDAO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ua/goit/dao/HibernateDeveloperDAO.java b/src/main/java/ua/goit/dao/HibernateDeveloperDAO.java
new file mode 100644
--- /dev/null	(date 1628098676428)
+++ b/src/main/java/ua/goit/dao/HibernateDeveloperDAO.java	(date 1628098676428)
@@ -0,0 +1,65 @@
+package ua.goit.dao;
+
+import org.hibernate.Session;
+import org.hibernate.SessionFactory;
+import ua.goit.config.HibernateDatabaseConnector;
+import ua.goit.dao.model.Developer;
+
+import java.util.List;
+
+public class HibernateDeveloperDAO implements HibernateDAO<Developer>{
+    private final SessionFactory sessionFactory = HibernateDatabaseConnector.getSessionFactory();
+
+    @Override
+    public Developer findById(Integer id) throws Exception {
+        try (Session session = sessionFactory.openSession()) {
+            return session.get(Developer.class, id);
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        return null;
+    }
+
+    @Override
+    public void create(Developer entity) throws Exception {
+        try (Session session = sessionFactory.openSession()) {
+            session.beginTransaction();
+            session.saveOrUpdate(entity);
+            session.getTransaction().commit();
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+    }
+
+    @Override
+    public void update(Developer entity) throws Exception {
+        try (Session session = sessionFactory.openSession()) {
+            session.beginTransaction();
+            session.saveOrUpdate(entity);
+            session.getTransaction().commit();
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+    }
+
+    @Override
+    public void delete(Developer entity) throws Exception {
+        try (Session session = sessionFactory.openSession()) {
+            session.beginTransaction();
+            session.delete(entity);
+            session.getTransaction().commit();
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+    }
+
+    @Override
+    public List<Developer> getAll() throws Exception {
+        try (Session session = sessionFactory.openSession()) {
+            return session.createQuery("SELECT a FROM Developer a", Developer.class).getResultList();
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        return null;
+    }
+}
Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\r\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n\r\n    <groupId>org.example</groupId>\r\n    <artifactId>java-dev-6</artifactId>\r\n    <version>1.0-SNAPSHOT</version>\r\n\r\n    <properties>\r\n        <maven.compiler.source>15</maven.compiler.source>\r\n        <maven.compiler.target>15</maven.compiler.target>\r\n    </properties>\r\n\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>javax.servlet</groupId>\r\n            <artifactId>javax.servlet-api</artifactId>\r\n            <version>4.0.1</version>\r\n            <scope>provided</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>javax</groupId>\r\n            <artifactId>javaee-api</artifactId>\r\n            <version>8.0.1</version>\r\n            <scope>provided</scope>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>javax.annotation</groupId>\r\n            <artifactId>javax.annotation-api</artifactId>\r\n            <version>1.3.2</version>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>javax.servlet</groupId>\r\n            <artifactId>servlet-api</artifactId>\r\n            <version>2.5</version>\r\n            <scope>provided</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>javax.servlet</groupId>\r\n            <artifactId>jstl</artifactId>\r\n            <version>1.2</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>javax.servlet.jsp.jstl</groupId>\r\n            <artifactId>jstl-api</artifactId>\r\n            <version>1.2-rev-1</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>com.zaxxer</groupId>\r\n            <artifactId>HikariCP</artifactId>\r\n            <version>5.0.0</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.slf4j</groupId>\r\n            <artifactId>slf4j-nop</artifactId>\r\n            <version>1.7.32</version>\r\n            <scope>test</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.postgresql</groupId>\r\n            <artifactId>postgresql</artifactId>\r\n            <version>42.2.23.jre7</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.hibernate</groupId>\r\n            <artifactId>hibernate-core</artifactId>\r\n            <version>5.5.4.Final</version>\r\n        </dependency>\r\n\r\n    </dependencies>\r\n\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pom.xml b/pom.xml
--- a/pom.xml	(revision 1a6b14e698b535404112631ff0ae7edd163ae2b0)
+++ b/pom.xml	(date 1628008828426)
@@ -5,7 +5,7 @@
     <modelVersion>4.0.0</modelVersion>
 
     <groupId>org.example</groupId>
-    <artifactId>java-dev-6</artifactId>
+    <artifactId>hibernate-homework</artifactId>
     <version>1.0-SNAPSHOT</version>
 
     <properties>
Index: .idea/compiler.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/compiler.xml b/.idea/compiler.xml
new file mode 100644
--- /dev/null	(date 1628004089726)
+++ b/.idea/compiler.xml	(date 1628004089726)
@@ -0,0 +1,16 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="CompilerConfiguration">
+    <annotationProcessing>
+      <profile name="Maven default annotation processors profile" enabled="true">
+        <sourceOutputDir name="target/generated-sources/annotations" />
+        <sourceTestOutputDir name="target/generated-test-sources/test-annotations" />
+        <outputRelativeToContentRoot value="true" />
+        <module name="hibernate-homework" />
+      </profile>
+    </annotationProcessing>
+    <bytecodeTargetLevel>
+      <module name="hibernate-homework" target="15" />
+    </bytecodeTargetLevel>
+  </component>
+</project>
\ No newline at end of file
Index: src/main/java/ua/goit/dao/HibernateCompanyDAO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ua.goit.dao;\r\n\r\nimport org.hibernate.Session;\r\nimport org.hibernate.SessionFactory;\r\nimport ua.goit.dao.model.Company;\r\n\r\nimport java.util.List;\r\n\r\npublic class HibernateCompanyDAO {\r\n    private final SessionFactory sessionFactory;\r\n\r\n    public HibernateCompanyDAO(SessionFactory sessionFactory) {\r\n        this.sessionFactory = sessionFactory;\r\n    }\r\n\r\n    public Company findById(Integer id) throws Exception{\r\n        Company company = null;\r\n        try (Session session = sessionFactory.openSession()) {\r\n            company = session.get(Company.class, id);\r\n            System.out.println(company.toString());\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        return company;\r\n    }\r\n\r\n    public void create(Company company) throws Exception {\r\n        try (Session session = sessionFactory.openSession()) {\r\n            session.save(company);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public void update(Company company) throws Exception{\r\n        try (Session session = sessionFactory.openSession()) {\r\n            session.update(company);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public void delete(Company company) throws Exception{\r\n        try (Session session = sessionFactory.openSession()) {\r\n            session.delete(company);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public List<Company> getAll() throws Exception{\r\n        try (Session session = sessionFactory.openSession()) {\r\n            return session.createQuery(\"SELECT a FROM Company a\", Company.class).getResultList();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        return null;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ua/goit/dao/HibernateCompanyDAO.java b/src/main/java/ua/goit/dao/HibernateCompanyDAO.java
--- a/src/main/java/ua/goit/dao/HibernateCompanyDAO.java	(revision 1a6b14e698b535404112631ff0ae7edd163ae2b0)
+++ b/src/main/java/ua/goit/dao/HibernateCompanyDAO.java	(date 1628088905369)
@@ -2,17 +2,15 @@
 
 import org.hibernate.Session;
 import org.hibernate.SessionFactory;
+import ua.goit.config.HibernateDatabaseConnector;
 import ua.goit.dao.model.Company;
 
 import java.util.List;
 
-public class HibernateCompanyDAO {
-    private final SessionFactory sessionFactory;
+public class HibernateCompanyDAO implements HibernateDAO<Company>{
+    private final SessionFactory sessionFactory = HibernateDatabaseConnector.getSessionFactory();
 
-    public HibernateCompanyDAO(SessionFactory sessionFactory) {
-        this.sessionFactory = sessionFactory;
-    }
-
+    @Override
     public Company findById(Integer id) throws Exception{
         Company company = null;
         try (Session session = sessionFactory.openSession()) {
@@ -24,30 +22,40 @@
         return company;
     }
 
+    @Override
     public void create(Company company) throws Exception {
         try (Session session = sessionFactory.openSession()) {
-            session.save(company);
+            session.beginTransaction();
+            session.saveOrUpdate(company);
+            session.getTransaction().commit();
         } catch (Exception e) {
             e.printStackTrace();
         }
     }
 
+    @Override
     public void update(Company company) throws Exception{
-        try (Session session = sessionFactory.openSession()) {
-            session.update(company);
-        } catch (Exception e) {
-            e.printStackTrace();
-        }
-    }
+            try (Session session = sessionFactory.openSession()) {
+                session.beginTransaction();
+                session.saveOrUpdate(company);
+                session.getTransaction().commit();
+            } catch (Exception e) {
+                e.printStackTrace();
+            }
+        }
 
+    @Override
     public void delete(Company company) throws Exception{
         try (Session session = sessionFactory.openSession()) {
+            session.beginTransaction();
             session.delete(company);
+            session.getTransaction().commit();
         } catch (Exception e) {
             e.printStackTrace();
         }
     }
 
+    @Override
     public List<Company> getAll() throws Exception{
         try (Session session = sessionFactory.openSession()) {
             return session.createQuery("SELECT a FROM Company a", Company.class).getResultList();
Index: target/classes/db.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/target/classes/db.properties b/target/classes/db.properties
new file mode 100644
--- /dev/null	(date 1627929395476)
+++ b/target/classes/db.properties	(date 1627929395476)
@@ -0,0 +1,5 @@
+db.host=localhost
+db.name=SQL-Homework
+username=postgres
+password=12345
+jdbc.driver=org.postgresql.Driver
\ No newline at end of file
Index: target/classes/CompanyDAO.hbm.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/target/classes/CompanyDAO.hbm.xml b/target/classes/CompanyDAO.hbm.xml
new file mode 100644
--- /dev/null	(date 1627983517735)
+++ b/target/classes/CompanyDAO.hbm.xml	(date 1627983517735)
@@ -0,0 +1,20 @@
+<?xml version='1.0'?>
+<!DOCTYPE hibernate-mapping PUBLIC
+        "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
+        "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
+
+<hibernate-mapping package="ua.goit.dao.model">
+
+    <class name="Company" table="companies">
+        <id name="company_id" type="int" column="company_id" >
+            <generator class="identity"/>
+        </id>
+        <property name="company_name" type="java.lang.String">
+            <column name="company_name" />
+        </property>
+        <property name="headquarters" type="java.lang.String">
+            <column name="headquarters" />
+        </property>
+    </class>
+
+</hibernate-mapping>
\ No newline at end of file
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
new file mode 100644
--- /dev/null	(date 1628099298815)
+++ b/.idea/workspace.xml	(date 1628099298815)
@@ -0,0 +1,165 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="AutoImportSettings">
+    <option name="autoReloadType" value="SELECTIVE" />
+  </component>
+  <component name="ChangeListManager">
+    <list default="true" id="1ee2031a-2ec1-4830-9b05-86599171afbc" name="Changes" comment="New versions of the service and dao packages were created">
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/ua/goit/dao/CompanyDAO.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/ua/goit/service/CompanyService.java" beforeDir="false" />
+    </list>
+    <option name="SHOW_DIALOG" value="false" />
+    <option name="HIGHLIGHT_CONFLICTS" value="true" />
+    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
+    <option name="LAST_RESOLUTION" value="IGNORE" />
+  </component>
+  <component name="FileTemplateManagerImpl">
+    <option name="RECENT_TEMPLATES">
+      <list>
+        <option value="Interface" />
+        <option value="Class" />
+      </list>
+    </option>
+  </component>
+  <component name="Git.Settings">
+    <option name="PREVIOUS_COMMIT_AUTHORS">
+      <list>
+        <option value="Burkov1982 &lt;burkov_daniil@i.ua&gt;" />
+      </list>
+    </option>
+    <option name="RECENT_BRANCH_BY_REPOSITORY">
+      <map>
+        <entry key="$PROJECT_DIR$" value="master" />
+      </map>
+    </option>
+    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
+  </component>
+  <component name="GitSEFilterConfiguration">
+    <file-type-list>
+      <filtered-out-file-type name="LOCAL_BRANCH" />
+      <filtered-out-file-type name="REMOTE_BRANCH" />
+      <filtered-out-file-type name="TAG" />
+      <filtered-out-file-type name="COMMIT_BY_MESSAGE" />
+    </file-type-list>
+  </component>
+  <component name="JpbToolWindowState">
+    <option name="myId2FirstActivated">
+      <map>
+        <entry key="JPA Structure" value="true" />
+      </map>
+    </option>
+    <option name="myId2Visible">
+      <map>
+        <entry key="JPA Structure" value="false" />
+      </map>
+    </option>
+  </component>
+  <component name="ProjectId" id="1wDpygzf2rBwrSVPL7SGwMGJQqj" />
+  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
+  <component name="ProjectViewState">
+    <option name="hideEmptyMiddlePackages" value="true" />
+    <option name="showLibraryContents" value="true" />
+    <option name="showMembers" value="true" />
+    <option name="showVisibilityIcons" value="true" />
+  </component>
+  <component name="PropertiesComponent">
+    <property name="ASKED_SHARE_PROJECT_CONFIGURATION_FILES" value="true" />
+    <property name="RunOnceActivity.OpenProjectViewOnStart" value="true" />
+    <property name="RunOnceActivity.ShowReadmeOnStart" value="true" />
+    <property name="last_opened_file_path" value="$PROJECT_DIR$/../java-dev-7" />
+  </component>
+  <component name="RecentsManager">
+    <key name="CopyFile.RECENT_KEYS">
+      <recent name="C:\Users\Я\IdeaProjects\hibernate-homework" />
+    </key>
+    <key name="MoveFile.RECENT_KEYS">
+      <recent name="C:\Users\Я\IdeaProjects\hibernate-homework" />
+    </key>
+  </component>
+  <component name="RunManager">
+    <configuration name="Unnamed" type="com.poratu.idea.plugins.tomcat" factoryName="SMART_TOMCAT_FACTORY" nameIsGenerated="true">
+      <option name="adminPort" value="8005" />
+      <option name="contextPath" value="/" />
+      <option name="docBase" value="$PROJECT_DIR$/src/main/webapp" />
+      <option name="envOptions" />
+      <option name="passParentEnvironmentVariables" value="true" />
+      <option name="port" value="8085" />
+      <option name="tomcatInfo">
+        <TomcatInfo>
+          <option name="name" value="Apache Tomcat/8.5.69" />
+          <option name="number" value="0" />
+          <option name="path" value="C:\Program Files\Apache Software Foundation\Tomcat 8.5" />
+          <option name="version" value="8.5.69.0" />
+        </TomcatInfo>
+      </option>
+      <option name="vmOptions" value="" />
+      <method v="2">
+        <option name="Make" enabled="true" />
+      </method>
+    </configuration>
+  </component>
+  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
+  <component name="TaskManager">
+    <task active="true" id="Default" summary="Default task">
+      <changelist id="1ee2031a-2ec1-4830-9b05-86599171afbc" name="Changes" comment="" />
+      <created>1628003270972</created>
+      <option name="number" value="Default" />
+      <option name="presentableId" value="Default" />
+      <updated>1628003270972</updated>
+    </task>
+    <task id="LOCAL-00001" summary="Initial commit">
+      <created>1628003509682</created>
+      <option name="number" value="00001" />
+      <option name="presentableId" value="LOCAL-00001" />
+      <option name="project" value="LOCAL" />
+      <updated>1628003509682</updated>
+    </task>
+    <task id="LOCAL-00002" summary="Initial commit">
+      <created>1628004282951</created>
+      <option name="number" value="00002" />
+      <option name="presentableId" value="LOCAL-00002" />
+      <option name="project" value="LOCAL" />
+      <updated>1628004282951</updated>
+    </task>
+    <task id="LOCAL-00003" summary="New versions of the service and dao packages were created">
+      <created>1628098686261</created>
+      <option name="number" value="00003" />
+      <option name="presentableId" value="LOCAL-00003" />
+      <option name="project" value="LOCAL" />
+      <updated>1628098686262</updated>
+    </task>
+    <option name="localTasksCounter" value="4" />
+    <servers />
+  </component>
+  <component name="Vcs.Log.Tabs.Properties">
+    <option name="TAB_STATES">
+      <map>
+        <entry key="MAIN">
+          <value>
+            <State>
+              <option name="FILTERS">
+                <map>
+                  <entry key="branch">
+                    <value>
+                      <list>
+                        <option value="master" />
+                      </list>
+                    </value>
+                  </entry>
+                </map>
+              </option>
+            </State>
+          </value>
+        </entry>
+      </map>
+    </option>
+    <option name="oldMeFiltersMigrated" value="true" />
+  </component>
+  <component name="VcsManagerConfiguration">
+    <MESSAGE value="Initial commit" />
+    <MESSAGE value="New versions of the service and dao packages were created" />
+    <option name="LAST_COMMIT_MESSAGE" value="New versions of the service and dao packages were created" />
+    <option name="OPTIMIZE_IMPORTS_BEFORE_PROJECT_COMMIT" value="true" />
+  </component>
+</project>
\ No newline at end of file
